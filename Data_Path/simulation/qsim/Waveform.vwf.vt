// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2021 09:51:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    data_path
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module data_path_vlg_sample_tst(
	A_Load,
	ALU_Sel,
	B_Load,
	Bus1_Sel,
	Bus2_Sel,
	CCR_Load,
	clock,
	from_memory,
	IR_Load,
	MAR_Load,
	PC_Inc,
	PC_Load,
	reset,
	sampler_tx
);
input  A_Load;
input [2:0] ALU_Sel;
input  B_Load;
input [1:0] Bus1_Sel;
input [1:0] Bus2_Sel;
input  CCR_Load;
input  clock;
input [7:0] from_memory;
input  IR_Load;
input  MAR_Load;
input  PC_Inc;
input  PC_Load;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A_Load or ALU_Sel or B_Load or Bus1_Sel or Bus2_Sel or CCR_Load or clock or from_memory or IR_Load or MAR_Load or PC_Inc or PC_Load or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module data_path_vlg_check_tst (
	address,
	CCR_Result,
	IR,
	to_memory,
	sampler_rx
);
input [7:0] address;
input [3:0] CCR_Result;
input [7:0] IR;
input [7:0] to_memory;
input sampler_rx;

reg [7:0] address_expected;
reg [3:0] CCR_Result_expected;
reg [7:0] IR_expected;
reg [7:0] to_memory_expected;

reg [7:0] address_prev;
reg [3:0] CCR_Result_prev;
reg [7:0] IR_prev;
reg [7:0] to_memory_prev;

reg [7:0] address_expected_prev;
reg [3:0] CCR_Result_expected_prev;
reg [7:0] IR_expected_prev;
reg [7:0] to_memory_expected_prev;

reg [7:0] last_address_exp;
reg [3:0] last_CCR_Result_exp;
reg [7:0] last_IR_exp;
reg [7:0] last_to_memory_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_prev = address;
	CCR_Result_prev = CCR_Result;
	IR_prev = IR;
	to_memory_prev = to_memory;
end

// update expected /o prevs

always @(trigger)
begin
	address_expected_prev = address_expected;
	CCR_Result_expected_prev = CCR_Result_expected;
	IR_expected_prev = IR_expected;
	to_memory_expected_prev = to_memory_expected;
end


// expected to_memory[ 7 ]
initial
begin
	to_memory_expected[7] = 1'bX;
end 
// expected to_memory[ 6 ]
initial
begin
	to_memory_expected[6] = 1'bX;
end 
// expected to_memory[ 5 ]
initial
begin
	to_memory_expected[5] = 1'bX;
end 
// expected to_memory[ 4 ]
initial
begin
	to_memory_expected[4] = 1'bX;
end 
// expected to_memory[ 3 ]
initial
begin
	to_memory_expected[3] = 1'bX;
end 
// expected to_memory[ 2 ]
initial
begin
	to_memory_expected[2] = 1'bX;
end 
// expected to_memory[ 1 ]
initial
begin
	to_memory_expected[1] = 1'bX;
end 
// expected to_memory[ 0 ]
initial
begin
	to_memory_expected[0] = 1'bX;
end 
// expected IR[ 7 ]
initial
begin
	IR_expected[7] = 1'bX;
end 
// expected IR[ 6 ]
initial
begin
	IR_expected[6] = 1'bX;
end 
// expected IR[ 5 ]
initial
begin
	IR_expected[5] = 1'bX;
end 
// expected IR[ 4 ]
initial
begin
	IR_expected[4] = 1'bX;
end 
// expected IR[ 3 ]
initial
begin
	IR_expected[3] = 1'bX;
end 
// expected IR[ 2 ]
initial
begin
	IR_expected[2] = 1'bX;
end 
// expected IR[ 1 ]
initial
begin
	IR_expected[1] = 1'bX;
end 
// expected IR[ 0 ]
initial
begin
	IR_expected[0] = 1'bX;
end 
// expected CCR_Result[ 3 ]
initial
begin
	CCR_Result_expected[3] = 1'bX;
end 
// expected CCR_Result[ 2 ]
initial
begin
	CCR_Result_expected[2] = 1'bX;
end 
// expected CCR_Result[ 1 ]
initial
begin
	CCR_Result_expected[1] = 1'bX;
end 
// expected CCR_Result[ 0 ]
initial
begin
	CCR_Result_expected[0] = 1'bX;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
end 
// generate trigger
always @(address_expected or address or CCR_Result_expected or CCR_Result or IR_expected or IR or to_memory_expected or to_memory)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address = %b | expected CCR_Result = %b | expected IR = %b | expected to_memory = %b | ",address_expected_prev,CCR_Result_expected_prev,IR_expected_prev,to_memory_expected_prev);
	$display("| real address = %b | real CCR_Result = %b | real IR = %b | real to_memory = %b | ",address_prev,CCR_Result_prev,IR_prev,to_memory_prev);
`endif
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( CCR_Result_expected_prev[0] !== 1'bx ) && ( CCR_Result_prev[0] !== CCR_Result_expected_prev[0] )
		&& ((CCR_Result_expected_prev[0] !== last_CCR_Result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CCR_Result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CCR_Result_expected_prev);
		$display ("     Real value = %b", CCR_Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CCR_Result_exp[0] = CCR_Result_expected_prev[0];
	end
	if (
		( CCR_Result_expected_prev[1] !== 1'bx ) && ( CCR_Result_prev[1] !== CCR_Result_expected_prev[1] )
		&& ((CCR_Result_expected_prev[1] !== last_CCR_Result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CCR_Result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CCR_Result_expected_prev);
		$display ("     Real value = %b", CCR_Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CCR_Result_exp[1] = CCR_Result_expected_prev[1];
	end
	if (
		( CCR_Result_expected_prev[2] !== 1'bx ) && ( CCR_Result_prev[2] !== CCR_Result_expected_prev[2] )
		&& ((CCR_Result_expected_prev[2] !== last_CCR_Result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CCR_Result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CCR_Result_expected_prev);
		$display ("     Real value = %b", CCR_Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CCR_Result_exp[2] = CCR_Result_expected_prev[2];
	end
	if (
		( CCR_Result_expected_prev[3] !== 1'bx ) && ( CCR_Result_prev[3] !== CCR_Result_expected_prev[3] )
		&& ((CCR_Result_expected_prev[3] !== last_CCR_Result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CCR_Result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CCR_Result_expected_prev);
		$display ("     Real value = %b", CCR_Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CCR_Result_exp[3] = CCR_Result_expected_prev[3];
	end
	if (
		( IR_expected_prev[0] !== 1'bx ) && ( IR_prev[0] !== IR_expected_prev[0] )
		&& ((IR_expected_prev[0] !== last_IR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[0] = IR_expected_prev[0];
	end
	if (
		( IR_expected_prev[1] !== 1'bx ) && ( IR_prev[1] !== IR_expected_prev[1] )
		&& ((IR_expected_prev[1] !== last_IR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[1] = IR_expected_prev[1];
	end
	if (
		( IR_expected_prev[2] !== 1'bx ) && ( IR_prev[2] !== IR_expected_prev[2] )
		&& ((IR_expected_prev[2] !== last_IR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[2] = IR_expected_prev[2];
	end
	if (
		( IR_expected_prev[3] !== 1'bx ) && ( IR_prev[3] !== IR_expected_prev[3] )
		&& ((IR_expected_prev[3] !== last_IR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[3] = IR_expected_prev[3];
	end
	if (
		( IR_expected_prev[4] !== 1'bx ) && ( IR_prev[4] !== IR_expected_prev[4] )
		&& ((IR_expected_prev[4] !== last_IR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[4] = IR_expected_prev[4];
	end
	if (
		( IR_expected_prev[5] !== 1'bx ) && ( IR_prev[5] !== IR_expected_prev[5] )
		&& ((IR_expected_prev[5] !== last_IR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[5] = IR_expected_prev[5];
	end
	if (
		( IR_expected_prev[6] !== 1'bx ) && ( IR_prev[6] !== IR_expected_prev[6] )
		&& ((IR_expected_prev[6] !== last_IR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[6] = IR_expected_prev[6];
	end
	if (
		( IR_expected_prev[7] !== 1'bx ) && ( IR_prev[7] !== IR_expected_prev[7] )
		&& ((IR_expected_prev[7] !== last_IR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_expected_prev);
		$display ("     Real value = %b", IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IR_exp[7] = IR_expected_prev[7];
	end
	if (
		( to_memory_expected_prev[0] !== 1'bx ) && ( to_memory_prev[0] !== to_memory_expected_prev[0] )
		&& ((to_memory_expected_prev[0] !== last_to_memory_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[0] = to_memory_expected_prev[0];
	end
	if (
		( to_memory_expected_prev[1] !== 1'bx ) && ( to_memory_prev[1] !== to_memory_expected_prev[1] )
		&& ((to_memory_expected_prev[1] !== last_to_memory_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[1] = to_memory_expected_prev[1];
	end
	if (
		( to_memory_expected_prev[2] !== 1'bx ) && ( to_memory_prev[2] !== to_memory_expected_prev[2] )
		&& ((to_memory_expected_prev[2] !== last_to_memory_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[2] = to_memory_expected_prev[2];
	end
	if (
		( to_memory_expected_prev[3] !== 1'bx ) && ( to_memory_prev[3] !== to_memory_expected_prev[3] )
		&& ((to_memory_expected_prev[3] !== last_to_memory_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[3] = to_memory_expected_prev[3];
	end
	if (
		( to_memory_expected_prev[4] !== 1'bx ) && ( to_memory_prev[4] !== to_memory_expected_prev[4] )
		&& ((to_memory_expected_prev[4] !== last_to_memory_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[4] = to_memory_expected_prev[4];
	end
	if (
		( to_memory_expected_prev[5] !== 1'bx ) && ( to_memory_prev[5] !== to_memory_expected_prev[5] )
		&& ((to_memory_expected_prev[5] !== last_to_memory_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[5] = to_memory_expected_prev[5];
	end
	if (
		( to_memory_expected_prev[6] !== 1'bx ) && ( to_memory_prev[6] !== to_memory_expected_prev[6] )
		&& ((to_memory_expected_prev[6] !== last_to_memory_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[6] = to_memory_expected_prev[6];
	end
	if (
		( to_memory_expected_prev[7] !== 1'bx ) && ( to_memory_prev[7] !== to_memory_expected_prev[7] )
		&& ((to_memory_expected_prev[7] !== last_to_memory_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port to_memory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", to_memory_expected_prev);
		$display ("     Real value = %b", to_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_to_memory_exp[7] = to_memory_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module data_path_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A_Load;
reg [2:0] ALU_Sel;
reg B_Load;
reg [1:0] Bus1_Sel;
reg [1:0] Bus2_Sel;
reg CCR_Load;
reg clock;
reg [7:0] from_memory;
reg IR_Load;
reg MAR_Load;
reg PC_Inc;
reg PC_Load;
reg reset;
// wires                                               
wire [7:0] address;
wire [3:0] CCR_Result;
wire [7:0] IR;
wire [7:0] to_memory;

wire sampler;                             

// assign statements (if any)                          
data_path i1 (
// port map - connection between master ports and signals/registers   
	.A_Load(A_Load),
	.address(address),
	.ALU_Sel(ALU_Sel),
	.B_Load(B_Load),
	.Bus1_Sel(Bus1_Sel),
	.Bus2_Sel(Bus2_Sel),
	.CCR_Load(CCR_Load),
	.CCR_Result(CCR_Result),
	.clock(clock),
	.from_memory(from_memory),
	.IR(IR),
	.IR_Load(IR_Load),
	.MAR_Load(MAR_Load),
	.PC_Inc(PC_Inc),
	.PC_Load(PC_Load),
	.reset(reset),
	.to_memory(to_memory)
);
// ALU_Sel[ 2 ]
initial
begin
	ALU_Sel[2] = 1'b0;
end 
// ALU_Sel[ 1 ]
initial
begin
	ALU_Sel[1] = 1'b0;
end 
// ALU_Sel[ 0 ]
initial
begin
	ALU_Sel[0] = 1'b0;
end 

// B_Load
initial
begin
	B_Load = 1'b0;
end 
// Bus1_Sel[ 1 ]
initial
begin
	repeat(3)
	begin
		Bus1_Sel[1] = 1'b0;
		Bus1_Sel[1] = #160000 1'b1;
		# 160000;
	end
	Bus1_Sel[1] = 1'b0;
end 
// Bus1_Sel[ 0 ]
initial
begin
	repeat(6)
	begin
		Bus1_Sel[0] = 1'b0;
		Bus1_Sel[0] = #80000 1'b1;
		# 80000;
	end
	Bus1_Sel[0] = 1'b0;
end 
// Bus2_Sel[ 1 ]
initial
begin
	Bus2_Sel[1] = 1'b0;
	# 80000;
	repeat(2)
	begin
		Bus2_Sel[1] = 1'b1;
		Bus2_Sel[1] = #160000 1'b0;
		# 160000;
	end
	Bus2_Sel[1] = 1'b1;
	Bus2_Sel[1] = #160000 1'b0;
end 
// Bus2_Sel[ 0 ]
initial
begin
	repeat(6)
	begin
		Bus2_Sel[0] = 1'b1;
		Bus2_Sel[0] = #80000 1'b0;
		# 80000;
	end
	Bus2_Sel[0] = 1'b1;
end 

// CCR_Load
initial
begin
	CCR_Load = 1'b0;
end 
// from_memory[ 7 ]
initial
begin
	from_memory[7] = 1'b1;
end 
// from_memory[ 6 ]
initial
begin
	from_memory[6] = 1'b1;
end 
// from_memory[ 5 ]
initial
begin
	from_memory[5] = 1'b1;
end 
// from_memory[ 4 ]
initial
begin
	from_memory[4] = 1'b1;
end 
// from_memory[ 3 ]
initial
begin
	from_memory[3] = 1'b1;
end 
// from_memory[ 2 ]
initial
begin
	from_memory[2] = 1'b1;
end 
// from_memory[ 1 ]
initial
begin
	from_memory[1] = 1'b1;
end 
// from_memory[ 0 ]
initial
begin
	from_memory[0] = 1'b1;
end 

// IR_Load
initial
begin
	IR_Load = 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #40000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #70000 1'b0;
	IR_Load = #20000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #20000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #20000 1'b0;
	IR_Load = #70000 1'b1;
	IR_Load = #20000 1'b0;
	IR_Load = #30000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #20000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #30000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #50000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #20000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #30000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #40000 1'b1;
	IR_Load = #20000 1'b0;
	IR_Load = #40000 1'b1;
	IR_Load = #30000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #10000 1'b1;
	IR_Load = #10000 1'b0;
	IR_Load = #30000 1'b1;
	IR_Load = #10000 1'b0;
end 

// MAR_Load
initial
begin
	MAR_Load = 1'b0;
end 

// PC_Inc
initial
begin
	PC_Inc = 1'b0;
end 

// PC_Load
initial
begin
	PC_Load = 1'b0;
end 

// A_Load
initial
begin
	A_Load = 1'b1;
	A_Load = #30000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #20000 1'b0;
	A_Load = #30000 1'b1;
	A_Load = #20000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #50000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #40000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #20000 1'b0;
	A_Load = #30000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #40000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #30000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #20000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #40000 1'b1;
	A_Load = #40000 1'b0;
	A_Load = #30000 1'b1;
	A_Load = #60000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #20000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #10000 1'b0;
	A_Load = #20000 1'b1;
	A_Load = #50000 1'b0;
	A_Load = #10000 1'b1;
	A_Load = #30000 1'b0;
	A_Load = #10000 1'b1;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #40000 1'b1;
	clock = #60000 1'b0;
	clock = #20000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #20000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #40000 1'b1;
	clock = #10000 1'b0;
	clock = #20000 1'b1;
	clock = #10000 1'b0;
	clock = #30000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #20000 1'b0;
	clock = #20000 1'b1;
	clock = #10000 1'b0;
	clock = #40000 1'b1;
	clock = #10000 1'b0;
	clock = #30000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #30000 1'b0;
	clock = #10000 1'b1;
	clock = #30000 1'b0;
	clock = #20000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #30000 1'b0;
	clock = #20000 1'b1;
	clock = #60000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #40000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #30000 1'b0;
	clock = #20000 1'b1;
	clock = #20000 1'b0;
	clock = #10000 1'b1;
	clock = #20000 1'b0;
	clock = #30000 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
	reset = #10000 1'b1;
	reset = #30000 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
	reset = #40000 1'b1;
	reset = #10000 1'b0;
	reset = #50000 1'b1;
	reset = #10000 1'b0;
	reset = #10000 1'b1;
	reset = #20000 1'b0;
	reset = #20000 1'b1;
	reset = #10000 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
	reset = #20000 1'b1;
	reset = #20000 1'b0;
	reset = #10000 1'b1;
	reset = #30000 1'b0;
	reset = #30000 1'b1;
	reset = #10000 1'b0;
	reset = #40000 1'b1;
	reset = #10000 1'b0;
	reset = #20000 1'b1;
	reset = #10000 1'b0;
	reset = #20000 1'b1;
	reset = #20000 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
	reset = #10000 1'b1;
	reset = #40000 1'b0;
	reset = #10000 1'b1;
	reset = #20000 1'b0;
	reset = #10000 1'b1;
	reset = #20000 1'b0;
	reset = #10000 1'b1;
	reset = #40000 1'b0;
	reset = #60000 1'b1;
	reset = #30000 1'b0;
	reset = #20000 1'b1;
	reset = #10000 1'b0;
	reset = #10000 1'b1;
	reset = #40000 1'b0;
	reset = #40000 1'b1;
	reset = #20000 1'b0;
	reset = #20000 1'b1;
	reset = #20000 1'b0;
	reset = #10000 1'b1;
	reset = #20000 1'b0;
end 

data_path_vlg_sample_tst tb_sample (
	.A_Load(A_Load),
	.ALU_Sel(ALU_Sel),
	.B_Load(B_Load),
	.Bus1_Sel(Bus1_Sel),
	.Bus2_Sel(Bus2_Sel),
	.CCR_Load(CCR_Load),
	.clock(clock),
	.from_memory(from_memory),
	.IR_Load(IR_Load),
	.MAR_Load(MAR_Load),
	.PC_Inc(PC_Inc),
	.PC_Load(PC_Load),
	.reset(reset),
	.sampler_tx(sampler)
);

data_path_vlg_check_tst tb_out(
	.address(address),
	.CCR_Result(CCR_Result),
	.IR(IR),
	.to_memory(to_memory),
	.sampler_rx(sampler)
);
endmodule

